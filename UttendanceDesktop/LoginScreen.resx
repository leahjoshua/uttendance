<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAJ8LAACfCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAQBAQEaDg0NLxsZGUkkIiFhKicncy4rKoExLS2LMi4tki4qKZQnJCOOHBoagxIQ
        EGoGBQU9AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAPNTEwhJmNi9uxo6DtuKqn+cGyr/7Iubb/zb67/9PDwP/Sw7//yru3/8Cx
        rv+1qKT/rqGe/3NqaeAEBAQmCwsKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDg4ABwYGMKSX
        ler25N//8+Hd//Ph3f/z4d3/9OLe//bk4P/04t7/3s7K/6aal/ZkXFulFhQUHCUiIgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD87
        OgApJiZlvK6r//Hf2//x39v/8N7a/+nY1P/ZycX/uayo/Il/feNOSEenFhUUTgAAAAoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAKCUkABUUFD5UTUylcmlnwHhvbct1bGrHY1tas0VAP40gHR1aAQEBJgAAAAUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAKAAAADwAAAA0AAAAFAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////+AAP//AAD//gAAP/4AAB/8AAAP/AAAB/wA
        AAf8AAAD/AAAA/gAAAPgAAADwAAAA4AAAAMAAAADAAAAAwAAAAeAAAAH4AAAD/wAAB/+AAA//gAB//wA
        A//8AB///AA///wA///+D/////////////8=
</value>
  </data>
</root>