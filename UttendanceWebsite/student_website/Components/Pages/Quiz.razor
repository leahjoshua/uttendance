@* Written by Judy Yang and Parisa Nawar for CS 4485.0w1, CS Project, starting April 11, 2025
	NetID: JXY200013 and PXN210032

    This page imports the question(s) and answer choices associated with the form password
    from the database. 
    If the student doesn't submit their quiz in time while they're accessing the page, it will
    automatically submit whatever they have and be stored in the database.
*@

@page "/quiz/{formID}"
@rendermode InteractiveServer

@inject NavigationManager navigateManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject UserConnectionInfoService ConnectionService
@inject SubmissionService SubmissionService
@inject StudentService StudentService
@using student_website.Models
@using student_website.Services
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations

<PageTitle>Attendance Quiz</PageTitle>

<h1>Quiz</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div class="quiz-header">
    Get the title here
    <span style="text-align: right">
        Due at:
        <span style="color: #E97502">
            @(dueDate?.ToString("f"))
        </span>
    </span>
</div>

<div class="quiz-body">
    @if (questions == null || !questions.Any())
    {
        <div>No Questions Found.</div>
    }
    else
    {
        @foreach (var question in questions)
        {
            <div class="card mb-3">
                <div class="card-body">
                    <p class="card-text">@question.ProblemStatement</p>
                </div>
            </div>
        }
    }
</div>

<button class="btn btn-submit" @onclick="Submit">Submit</button>

@code {
    //parisa
    [Parameter]
    public string? formID { get; set; }
    private DateTime? dueDate { get; set; }
    private List<Question>? questions;
    private int currentCount = 0;
    private string? userIP;
    private int intID = 0;

    protected override async Task OnInitializedAsync()
    {
        // Get user IPAddress
        var info = ConnectionService.GetUserConnectionInfo();
        userIP = info.RemoteIpAddress;

        //show date
        intID = int.Parse(formID);
        using var db = DbContextFactory.CreateDbContext();
        var form = await db.Form.FirstOrDefaultAsync(f => f.FormID.Equals(intID));
        dueDate = form?.CloseDateTime;

        //show questions
        questions = await db.Question.Where(q => q.FK_BankID == intID).ToListAsync();
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    // Adding async allows you to use await
    private async Task Submit()
    {
        await SubmissionService.CreateAndInsertSubmissionAsync(userIP, intID, StudentService.StudentID);
        navigateManager.NavigateTo("/submission");
    }
}
